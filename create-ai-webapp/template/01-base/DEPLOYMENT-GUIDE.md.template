# 🚀 {{PROJECT_NAME}} - 部署指南

> **版本**: 1.0.0
> **目的**: 提供本地開發、測試和生產環境的完整部署指導
> **適用**: 開發環境 | 測試環境 | 生產環境
> **最後更新**: {{CURRENT_DATE}}

本指南詳細說明如何部署 {{PROJECT_NAME}} 到不同的環境中。

## 📋 目錄

- [環境要求](#環境要求)
- [本地開發部署](#本地開發部署)
- [Docker 部署](#docker-部署)
- [生產環境部署](#生產環境部署)
- [CI/CD 流程](#cicd-流程)
- [監控和維護](#監控和維護)
- [故障排除](#故障排除)

## 🔧 環境要求

### 基本要求

- **Node.js**: 18.x 或更高版本
- **數據庫**: 選擇以下之一
  - PostgreSQL: 15.x 或更高版本 (支持 pgvector 擴展，如使用向量搜索)
  - MySQL: 8.0 或更高版本
  - MongoDB: 6.0 或更高版本
  - SQLite: 3.x (僅用於開發/測試)
- **Redis**: 7.x 或更高版本 (如使用緩存模組)
- **Docker**: 24.x 或更高版本 (可選)
- **Docker Compose**: 2.x 或更高版本 (可選)

### 外部服務（根據選擇的模組）

#### 🔴 可能需要的服務
- **Azure OpenAI** (如使用 AI 整合模組)
- **SendGrid / SMTP** (如使用通知模組)
- **Azure AD** (如使用 SSO 認證)

## 🏠 本地開發部署

### 1. 克隆倉庫

```bash
git clone https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}.git
cd {{PROJECT_NAME}}
```

### 2. 安裝依賴

```bash
npm install
```

### 3. 設置環境變數

複製環境變數範例文件：

```bash
cp .env.example .env.local
```

編輯 `.env.local` 並填入必要的配置：

```env
# ============================================
# 🔴 必需配置（核心功能）
# ============================================

# 1. 資料庫連接（根據您選擇的數據庫類型）

# PostgreSQL
DATABASE_URL="postgresql://postgres:dev_password@localhost:5432/{{PROJECT_DATABASE}}"

# MySQL
# DATABASE_URL="mysql://root:dev_password@localhost:3306/{{PROJECT_DATABASE}}"

# MongoDB
# DATABASE_URL="mongodb://localhost:27017/{{PROJECT_DATABASE}}"

# SQLite
# DATABASE_URL="file:./dev.db"

# 2. JWT 認證（至少32字符）
JWT_SECRET="your-super-secret-jwt-key-min-32-characters-long"
JWT_EXPIRES_IN="7d"

# 3. Next.js 配置
NEXT_PUBLIC_APP_URL="http://localhost:3000"
NODE_ENV="development"

# ============================================
# 🟡 可選配置（根據選擇的模組）
# ============================================

# 4. AI 模組配置 (如果選擇了 AI 整合模組)
# AZURE_OPENAI_API_KEY="your-azure-openai-api-key"
# AZURE_OPENAI_ENDPOINT="https://your-resource.openai.azure.com/"
# AZURE_OPENAI_DEPLOYMENT_ID="gpt-4"

# 5. 緩存模組配置 (如果選擇了緩存模組)
# REDIS_URL="redis://localhost:6379"

# 6. 郵件服務配置 (如果選擇了通知模組)
# EMAIL_SERVICE_API_KEY="your-sendgrid-api-key"
# EMAIL_FROM_ADDRESS="noreply@your-domain.com"

# 7. Azure AD SSO (如果選擇了 SSO 認證)
# AZURE_AD_CLIENT_ID="your-azure-ad-client-id"
# AZURE_AD_CLIENT_SECRET="your-azure-ad-client-secret"
# AZURE_AD_TENANT_ID="your-azure-ad-tenant-id"

# ============================================
# 🟢 開發輔助配置
# ============================================

# 8. 監控系統 (如果選擇了監控模組)
# ENABLE_TELEMETRY="true"
# OTEL_SERVICE_NAME="{{PROJECT_NAME}}-dev"
```

### 4. 設置資料庫

#### PostgreSQL

```bash
# 啟動 PostgreSQL (使用 Docker)
docker run --name postgres-dev -e POSTGRES_PASSWORD=dev_password -p 5432:5432 -d postgres:15

# 如需要向量搜索支持
docker run --name postgres-dev -e POSTGRES_PASSWORD=dev_password -p 5432:5432 -d pgvector/pgvector:pg15

# 生成 Prisma 客戶端
npm run db:generate

# 運行資料庫遷移
npm run db:migrate

# (可選) 運行種子數據
npm run db:seed
```

#### MySQL

```bash
# 啟動 MySQL (使用 Docker)
docker run --name mysql-dev -e MYSQL_ROOT_PASSWORD=dev_password -p 3306:3306 -d mysql:8.0

# 生成 Prisma 客戶端並遷移
npm run db:generate
npm run db:migrate
```

#### MongoDB

```bash
# 啟動 MongoDB (使用 Docker)
docker run --name mongo-dev -p 27017:27017 -d mongo:6.0

# 推送 Prisma schema (MongoDB 使用 db push，不使用 migrate)
npm run db:generate
npm run db:push
```

#### SQLite

```bash
# SQLite 不需要啟動服務，直接生成和推送
npm run db:generate
npm run db:push
```

### 5. 啟動開發服務器

```bash
npm run dev
```

應用程式將在 `http://localhost:3000` 運行。

## 🐳 Docker 部署

### 開發環境 Docker 部署

```bash
# 啟動所有服務
docker-compose -f docker-compose.dev.yml up -d

# 查看日誌
docker-compose -f docker-compose.dev.yml logs -f

# 停止服務
docker-compose -f docker-compose.dev.yml down
```

### 生產環境 Docker 部署

```bash
# 構建並啟動生產環境
docker-compose -f docker-compose.prod.yml up -d

# 啟動包含監控的完整堆棧 (如果配置了監控)
docker-compose -f docker-compose.prod.yml -f docker-compose.monitoring.yml up -d

# 查看服務狀態
docker-compose -f docker-compose.prod.yml ps

# 查看特定服務日誌
docker-compose -f docker-compose.prod.yml logs -f app
```

## 🏭 生產環境部署

### 1. 服務器準備

#### 最低硬體要求

- **CPU**: 2 核心
- **記憶體**: 4GB RAM
- **儲存**: 20GB SSD
- **網路**: 穩定的網路連接

#### 推薦硬體配置

- **CPU**: 4 核心
- **記憶體**: 8GB RAM
- **儲存**: 50GB SSD
- **網路**: 高速網路連接

### 2. 環境配置

#### 安裝 Docker 和 Docker Compose

```bash
# Ubuntu/Debian
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER

# 安裝 Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

### 3. 部署步驟

#### Step 1: 準備部署文件

```bash
# 創建部署目錄
mkdir -p /opt/{{PROJECT_NAME}}
cd /opt/{{PROJECT_NAME}}

# 克隆倉庫
git clone https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}.git .

# 創建生產環境變數文件
cp .env.example .env.production
```

#### Step 2: 配置環境變數

編輯 `.env.production`：

```env
# ============================================
# 🔴 核心服務配置（生產環境）
# ============================================

# 1. 生產資料庫配置
DATABASE_URL="{{DATABASE_TYPE}}://prod_user:CHANGE_ME_SECURE_PASSWORD@{{DATABASE_HOST}}:{{DATABASE_PORT}}/{{PROJECT_DATABASE}}_prod"
POSTGRES_USER="prod_user"
POSTGRES_PASSWORD="CHANGE_ME_SECURE_DB_PASSWORD"

# 2. Redis 配置（如使用緩存模組）
REDIS_URL="redis://:CHANGE_ME_REDIS_PASSWORD@redis:6379"
REDIS_PASSWORD="CHANGE_ME_REDIS_PASSWORD"

# 3. 安全配置
JWT_SECRET="CHANGE_ME_64_CHAR_RANDOM_STRING_FOR_JWT_SIGNING"
JWT_EXPIRES_IN="7d"

# 4. 應用配置
NODE_ENV="production"
NEXT_PUBLIC_APP_URL="https://your-production-domain.com"

# ============================================
# 🟡 模組特定配置（根據選擇的模組）
# ============================================

# 5. AI 模組配置
# AZURE_OPENAI_API_KEY="your-production-key"
# AZURE_OPENAI_ENDPOINT="https://your-resource.openai.azure.com/"

# 6. 郵件服務配置
# EMAIL_SERVICE_API_KEY="your-production-sendgrid-key"
# EMAIL_FROM_ADDRESS="noreply@your-domain.com"

# 7. Azure AD SSO 配置
# AZURE_AD_CLIENT_ID="your-production-client-id"
# AZURE_AD_CLIENT_SECRET="your-production-secret"
# AZURE_AD_TENANT_ID="your-production-tenant"

# ============================================
# 📊 監控系統配置（如選擇了監控模組）
# ============================================

# 8. 監控服務
# ENABLE_TELEMETRY="true"
# OTEL_SERVICE_NAME="{{PROJECT_NAME}}-prod"
# GRAFANA_PASSWORD="CHANGE_ME_SECURE_GRAFANA_PASSWORD"
```

**🔒 生產環境安全檢查清單**：

```bash
# 1. 生成強密碼
openssl rand -base64 48

# 2. 驗證所有 CHANGE_ME_ 佔位符已替換
grep "CHANGE_ME_" .env.production

# 3. 檢查文件權限
chmod 600 .env.production

# 4. 驗證環境配置
docker-compose -f docker-compose.prod.yml config --quiet && echo "✅ Configuration valid"
```

#### Step 3: 部署應用程式

```bash
# 拉取最新鏡像並啟動服務
docker-compose -f docker-compose.prod.yml pull
docker-compose -f docker-compose.prod.yml up -d

# 等待服務啟動並檢查狀態
sleep 30
docker-compose -f docker-compose.prod.yml ps

# 檢查健康狀態
curl http://localhost/api/health
```

#### Step 4: 配置 SSL（推薦）

使用 Let's Encrypt 配置 SSL：

```bash
# 安裝 Certbot
sudo apt-get update
sudo apt-get install certbot python3-certbot-nginx

# 獲取 SSL 證書
sudo certbot --nginx -d your-domain.com

# 設置自動續期
sudo crontab -e
# 添加以下行：
# 0 12 * * * /usr/bin/certbot renew --quiet
```

## ⚙️ CI/CD 流程

### GitHub Actions 工作流程

本項目使用 GitHub Actions 進行自動化 CI/CD，包含以下流程：

#### CI 流程 (`.github/workflows/ci.yml`)

1. **代碼品質檢查**
   - ESLint 代碼風格檢查
   - TypeScript 類型檢查

2. **自動化測試**
   - 單元測試 (Jest)
   - E2E 測試 (Playwright)

3. **應用程式構建**
   - Next.js 應用構建
   - Docker 鏡像構建

#### CD 流程 (`.github/workflows/deploy.yml`)

1. **部署前檢查**
   - 驗證環境變數
   - 檢查資料庫連接

2. **資料庫遷移**
   - 運行 Prisma 遷移

3. **分階段部署**
   - Staging 環境部署
   - 生產環境部署 (手動觸發)

### 設置 CI/CD

#### 1. 配置 GitHub Secrets

在 GitHub 倉庫設置中添加以下 Secrets：

```bash
# 核心配置
DATABASE_URL
JWT_SECRET
NEXT_PUBLIC_APP_URL
NODE_ENV

# 根據選擇的模組添加相應的 secrets
# AZURE_OPENAI_API_KEY (如使用 AI 模組)
# EMAIL_SERVICE_API_KEY (如使用通知模組)
# AZURE_AD_CLIENT_ID (如使用 SSO)

# Docker Registry (可選)
DOCKER_USERNAME
DOCKER_PASSWORD
```

#### 2. 觸發部署

```bash
# 自動觸發 (推送到 main 分支)
git push origin main

# 手動觸發部署
# 在 GitHub Actions 頁面使用 "workflow_dispatch"
```

## 📊 監控和維護

### 健康檢查

```bash
# 應用程式健康檢查
curl http://your-domain/api/health

# 資料庫檢查 (PostgreSQL 示例)
docker-compose -f docker-compose.prod.yml exec postgres \
  psql -U prod_user -d {{PROJECT_DATABASE}}_prod -c "SELECT version();"

# Redis 連接檢查 (如使用)
docker-compose -f docker-compose.prod.yml exec redis redis-cli ping

# 所有容器健康狀態
docker-compose -f docker-compose.prod.yml ps
```

### 備份策略

#### 資料庫備份

```bash
# PostgreSQL 備份腳本
#!/bin/bash
BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backup/database"
mkdir -p ${BACKUP_DIR}

docker-compose -f docker-compose.prod.yml exec -T postgres \
  pg_dump -U prod_user -Fc {{PROJECT_DATABASE}}_prod | \
  gzip > ${BACKUP_DIR}/backup_${BACKUP_DATE}.sql.gz

# 保留最近 30 天的備份
find ${BACKUP_DIR} -name "backup_*.sql.gz" -mtime +30 -delete
```

#### 自動化備份 Cron 任務

```bash
# 編輯 crontab
crontab -e

# 添加每日凌晨 2:00 執行備份
0 2 * * * /opt/{{PROJECT_NAME}}/scripts/backup-db.sh >> /var/log/backup.log 2>&1
```

## 🔧 故障排除

### 常見問題和解決方案

#### 1. 資料庫連接失敗

```bash
# 檢查資料庫容器狀態
docker-compose -f docker-compose.prod.yml logs database

# 重新啟動資料庫服務
docker-compose -f docker-compose.prod.yml restart database
```

#### 2. 應用程式錯誤

```bash
# 查看應用程式日誌
docker-compose -f docker-compose.prod.yml logs app

# 重新構建應用程式鏡像
docker-compose -f docker-compose.prod.yml build --no-cache app

# 檢查環境變數配置
docker-compose -f docker-compose.prod.yml exec app env | grep DATABASE_URL
```

#### 3. 性能問題

```bash
# 檢查容器資源使用
docker stats --no-stream

# 檢查資料庫連接池
# 根據您的數據庫類型運行相應的診斷命令
```

### 更新和升級

```bash
# 1. 備份當前版本
cp .env.production .env.production.backup

# 2. 拉取最新代碼
git pull origin main

# 3. 更新服務
docker-compose -f docker-compose.prod.yml pull
docker-compose -f docker-compose.prod.yml up -d

# 4. 運行資料庫遷移 (如果需要)
docker-compose -f docker-compose.prod.yml exec app npm run db:migrate:deploy

# 5. 驗證更新
curl http://your-domain/api/health
```

### 回滾程序

```bash
# 1. 回滾到前一個版本
git reset --hard HEAD~1

# 2. 重新部署
docker-compose -f docker-compose.prod.yml up -d --build
```

## 📞 支援和維護

### 定期維護任務

- **每日**: 檢查應用程式健康狀態和監控指標
- **每週**: 檢查和清理日誌文件，更新系統安全補丁
- **每月**: 檢查備份完整性，進行性能優化評估
- **每季**: 檢查和更新依賴套件，進行安全審計

---

**🎯 記住：定期備份、監控系統狀態、保持依賴更新是成功生產部署的關鍵！**
