# 🤖 AI 助手快速參考指南

> **⚡ 快速開始**: AI助手必讀文件，30秒了解整個項目結構

**項目名稱**: {{PROJECT_NAME}}
**創建日期**: {{CREATION_DATE}}
**數據庫**: {{DATABASE_TYPE}}
**最後更新**: {{CREATION_DATE}}

---

# 🚨⚡ 立即執行區 - AI助手專用 ⚡🚨

## 🎯 第一優先級：立即執行清單

### ✅ **必須立即完成的3個核心動作**

```bash
🟦 第1步：了解項目基礎
   └─ 項目: {{PROJECT_NAME}} | 數據庫: {{DATABASE_TYPE}} | 框架: Next.js 14

🟦 第2步：讀取項目索引
   └─ 文件: PROJECT-INDEX.md - 完整的項目結構、模組和 API 導航

🟦 第3步：檢查已安裝模組
   └─ 查看下方「已安裝模組」清單，了解可用功能
```

### 🔴 **強制執行規則（不可妥協）**

- **🇨🇳 語言規則**: 永遠使用繁體中文對答，無例外
- **📋 模組確認**: 使用功能前先確認模組是否已安裝（查閱下方清單）
- **🗄️ 數據庫適配**: 注意當前使用 {{DATABASE_TYPE}}，使用對應的語法和特性
- **📝 代碼標準**: 遵循 TypeScript 嚴格模式、ESLint 規則
- **🧪 測試優先**: 修改代碼後必須運行測試驗證
- **📚 文檔同步**: 重要變更必須更新相關文檔
- **✅ 完整實現**: 不使用 TODO 註釋、不留空函數、不用假數據

## 🔄 必須執行的完整工作流程

### **📥 開發前準備（每次必須）**

1. ✅ 檢查 AI-ASSISTANT-GUIDE.md (本文件) - 了解工作流程
2. ✅ 檢查 PROJECT-INDEX.md - 了解項目完整結構
3. ✅ 執行 `git status` 和 `git branch` - 確認分支狀態
4. ✅ 確認要使用的模組是否已安裝
5. ✅ 制定 todos list 或工作計劃

### **🛠️ 開發過程中（持續遵循）**

1. ✅ 使用已安裝的模組（查閱下方清單）
2. ✅ 遵循現有的代碼結構和命名慣例
3. ✅ 使用數據庫抽象層 (`lib/db/database-adapter.ts`)
4. ✅ 所有 API 路由使用 API Gateway 中間件
5. ✅ 新增功能時同步更新類型定義 (`types/`)

### **📋 每個 todo 完成後（強制執行）**

1. ✅ 執行 `npm run lint` - 檢查代碼風格
2. ✅ 執行 `npm run typecheck` - 檢查類型錯誤
3. ✅ 執行相關測試 - 驗證功能正常
4. ✅ 更新相關文檔 - README、API 文檔等
5. ✅ 提交變更到 Git - 使用描述性 commit message
6. ✅ 與用戶確認完成狀態

---

## 📦 已安裝模組

{{INSTALLED_MODULES}}

---

## 🗄️ 數據庫配置

**類型**: {{DATABASE_TYPE}}
**連接**: 查看 `.env.local` 中的 `DATABASE_URL`

### 數據庫操作指南

**使用抽象層** (推薦):
```typescript
import { databaseAdapter } from '@/lib/db/database-adapter';

// 查詢
const users = await databaseAdapter.findMany('users', {
  where: { active: true }
});

// 創建
const newUser = await databaseAdapter.create('users', {
  data: { name: 'John', email: 'john@example.com' }
});
```

**Prisma Schema 位置**: `prisma/schema.prisma`

### 常用命令

```bash
# Prisma 操作
npm run prisma:generate  # 生成 Prisma Client
npm run prisma:migrate   # 執行遷移 (PostgreSQL/MySQL/SQLite)
npm run prisma:push      # 推送 Schema (MongoDB)
npm run prisma:studio    # 打開數據庫 GUI

# 開發
npm run dev              # 啟動開發服務器 (localhost:3000)
npm run build            # 生產環境構建
npm start                # 啟動生產服務器

# 測試和質量檢查
npm run lint             # ESLint 代碼檢查
npm run typecheck        # TypeScript 類型檢查
npm run test             # Jest 單元測試
npm run test:e2e         # Playwright E2E 測試

# 數據庫
npm run db:seed          # 填充示例數據

{{MONITORING_COMMANDS}}
```

---

## 🎯 項目結構速覽

```
{{PROJECT_NAME}}/
├── app/                    # Next.js 14 App Router
│   ├── layout.tsx         # 根佈局
│   ├── page.tsx           # 首頁
│   ├── api/               # API 路由
│   └── (routes)/          # 頁面路由
│
├── components/            # React 組件
│   ├── ui/               # 基礎 UI 組件 (Radix UI)
│   ├── layout/           # 佈局組件
│   └── [feature]/        # 功能組件
│
├── lib/                  # 核心工具
│   ├── db/              # 數據庫適配器
│   ├── utils.ts         # 通用工具
│   └── [module]/        # 模組工具
│
├── types/               # TypeScript 類型
├── hooks/               # React Hooks
├── prisma/              # Prisma Schema
└── public/              # 靜態資源
```

---

## 🎨 技術棧

**框架**:
- Next.js 14 (App Router, Server Actions)
- React 18
- TypeScript 5

**數據庫**:
- Prisma ORM
- {{DATABASE_TYPE}}

**UI**:
- Tailwind CSS 3
- Radix UI 組件
- Lucide React 圖標

**測試**:
- Jest (單元測試)
- Playwright (E2E 測試)

{{MONITORING_STACK}}

---

## 🔑 重要模式和慣例

### 1. 數據庫操作

✅ **正確** - 使用抽象層:
```typescript
import { databaseAdapter } from '@/lib/db/database-adapter';
const users = await databaseAdapter.findMany('users', {...});
```

❌ **錯誤** - 直接使用 Prisma:
```typescript
import { prisma } from '@/lib/prisma';
const users = await prisma.user.findMany({...});
```

### 2. API 路由結構

✅ **正確** - 使用中間件:
```typescript
import { withApiMiddleware } from '@/lib/api-gateway/middleware';

export const GET = withApiMiddleware(async (req) => {
  // 處理邏輯
});
```

### 3. 環境變數

- 永遠使用 `.env.local` (已在 `.gitignore`)
- 永不提交 `.env` 或 `.env.local`
- 新增變數時更新 `env.template`

### 4. 命名慣例

- **組件**: `PascalCase.tsx` (e.g., `UserProfile.tsx`)
- **工具函數**: `camelCase.ts` (e.g., `formatDate.ts`)
- **類型**: `PascalCase` (e.g., `UserData`)
- **常量**: `UPPER_SNAKE_CASE`

### 5. Git 工作流程

```bash
# 1. 創建功能分支
git checkout -b feature/user-authentication

# 2. 開發和測試
# ... 編寫代碼 ...
npm run lint
npm run test

# 3. 提交變更
git add .
git commit -m "feat: add user authentication with JWT"

# 4. 推送並創建 PR
git push origin feature/user-authentication
```

---

## 📚 關鍵文檔快速導航

### 必讀文檔

| 文檔 | 用途 | 優先級 |
|------|------|--------|
| **AI-ASSISTANT-GUIDE.md** | AI 助手快速參考（本文件） | ⭐⭐⭐ |
| **PROJECT-INDEX.md** | 完整項目索引和導航 | ⭐⭐⭐ |
| **README.md** | 項目介紹和快速開始 | ⭐⭐⭐ |

### 技術文檔

| 文檔 | 位置 | 說明 |
|------|------|------|
| **API 文檔** | `docs/api/` | API 端點說明 |
| **組件文檔** | `components/*/README.md` | 組件使用指南 |
| **數據庫 Schema** | `prisma/schema.prisma` | 數據模型定義 |

---

## 🚀 快速開始範例

### 創建新的 API 端點

```typescript
// app/api/users/route.ts
import { withApiMiddleware } from '@/lib/api-gateway/middleware';
import { databaseAdapter } from '@/lib/db/database-adapter';

export const GET = withApiMiddleware(async (req) => {
  const users = await databaseAdapter.findMany('users', {
    where: { active: true }
  });

  return Response.json({ users });
});
```

### 創建新的頁面

```typescript
// app/dashboard/page.tsx
import { databaseAdapter } from '@/lib/db/database-adapter';

export default async function DashboardPage() {
  const stats = await databaseAdapter.findMany('stats', {});

  return (
    <div>
      <h1>儀表板</h1>
      {/* 渲染統計數據 */}
    </div>
  );
}
```

### 創建新的組件

```typescript
// components/user/UserCard.tsx
import { Card } from '@/components/ui/card';

interface UserCardProps {
  name: string;
  email: string;
}

export function UserCard({ name, email }: UserCardProps) {
  return (
    <Card>
      <h3>{name}</h3>
      <p>{email}</p>
    </Card>
  );
}
```

---

## ⚠️ 常見問題和注意事項

### Q: 如何添加新的數據模型？

1. 編輯 `prisma/schema.prisma`
2. 執行 `npm run prisma:generate`
3. 執行 `npm run prisma:migrate` (或 `prisma:push` for MongoDB)
4. 更新 TypeScript 類型

### Q: 如何切換監控後端？

編輯 `.env.local` 中的 `MONITORING_BACKEND`:
- `prometheus` - Prometheus + Grafana
- `azure` - Azure Monitor
- `console` - 控制台輸出（開發用）

### Q: 如何添加新的模組？

1. 參考 `02-modules/` 中的模組結構
2. 創建模組目錄並實現功能
3. 更新 `PROJECT-INDEX.md`
4. 添加文檔和測試

### Q: MongoDB 和 SQL 數據庫有什麼不同？

- **MongoDB**: 使用 `npm run prisma:push`（無遷移）
- **PostgreSQL/MySQL/SQLite**: 使用 `npm run prisma:migrate`

---

## 📞 支持資源

- **項目倉庫**: {{PROJECT_REPOSITORY}}
- **模板來源**: https://github.com/laitim2001/ai-webapp-template
- **Issues**: 在項目倉庫報告問題
- **文檔**: 查閱 `docs/` 目錄

---

**下一步**:
1. 📖 閱讀 [PROJECT-INDEX.md](PROJECT-INDEX.md) - 完整項目索引
2. 🚀 執行 `npm run dev` - 啟動開發服務器
3. 🧪 執行 `npm run test` - 驗證所有功能正常

---

**項目**: {{PROJECT_NAME}} | **數據庫**: {{DATABASE_TYPE}} | **創建**: {{CREATION_DATE}}
