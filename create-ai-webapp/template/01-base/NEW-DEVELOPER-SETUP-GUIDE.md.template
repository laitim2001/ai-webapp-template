# 🚀 {{PROJECT_NAME}} - 新開發者上手指南

> **目的**: 幫助新開發者快速上手項目，了解開發流程和最佳實踐
> **適用對象**: 新加入團隊的開發者、實習生、外部協作者
> **閱讀時間**: 20-30 分鐘

---

## 📋 快速目錄

1. [環境準備](#環境準備)
2. [項目設置](#項目設置)
3. [啟動項目](#啟動項目)
4. [文檔閱讀順序](#文檔閱讀順序)
5. [開發工作流程](#開發工作流程)
6. [常用命令](#常用命令)
7. [項目結構](#項目結構)
8. [開發規範](#開發規範)
9. [常見問題](#常見問題)
10. [資源鏈接](#資源鏈接)

---

## 🔧 環境準備

### 必須軟件

| 軟件 | 版本要求 | 用途 | 安裝鏈接 |
|------|----------|------|----------|
| **Node.js** | 18.x+ | 運行環境 | https://nodejs.org/ |
| **Git** | 最新版 | 版本控制 | https://git-scm.com/ |
| **VS Code** | 最新版 | 推薦編輯器 | https://code.visualstudio.com/ |
| **{{DATABASE_TYPE}}** | 推薦版本 | 數據庫 | 根據選擇的數據庫 |

### 推薦軟件

- **Docker Desktop** (可選) - 容器化部署和數據庫管理
- **Postman** 或 **Insomnia** - API 測試
- **TablePlus** 或 **DBeaver** - 數據庫管理工具

### VS Code 擴展

推薦安裝以下擴展：

```
- ESLint (dbaeumer.vscode-eslint)
- Prettier (esbenp.prettier-vscode)
- Tailwind CSS IntelliSense (bradlc.vscode-tailwindcss)
- Prisma (Prisma.prisma)
- TypeScript Vue Plugin (Vue.volar)
- GitLens (eamodio.gitlens)
- Error Lens (usernamehw.errorlens)
```

安裝方法：VS Code → Extensions (Ctrl+Shift+X) → 搜索並安裝

---

## 🏗️ 項目設置

### 1. 克隆項目

```bash
# 使用 SSH (推薦)
git clone {{GIT_SSH_URL}}

# 使用 HTTPS
git clone {{GIT_HTTPS_URL}}

# 進入項目目錄
cd {{PROJECT_NAME}}
```

### 2. 安裝依賴

```bash
npm install
```

**估計時間**: 2-5 分鐘（取決於網絡速度）

### 3. 配置環境變數

```bash
# 複製環境變數模板
cp .env.example .env.local

# 使用編輯器打開
code .env.local
```

**必須配置的變數**:

```bash
# 數據庫連接
DATABASE_URL="{{DATABASE_TYPE}}://user:password@localhost:5432/{{PROJECT_NAME}}"

# NextAuth 配置
NEXTAUTH_SECRET="生成一個隨機密鑰"  # 運行: openssl rand -base64 32
NEXTAUTH_URL="http://localhost:3000"

# (可選) Azure OpenAI - 如果使用 AI 功能
AZURE_OPENAI_API_KEY="你的API密鑰"
AZURE_OPENAI_ENDPOINT="你的端點"

# (可選) Redis - 如果使用緩存模組
REDIS_URL="redis://localhost:6379"
```

### 4. 數據庫設置

#### 使用 Docker (推薦)

```bash
# PostgreSQL
docker run --name {{PROJECT_NAME}}-db \
  -e POSTGRES_PASSWORD=password \
  -e POSTGRES_DB={{PROJECT_NAME}} \
  -p 5432:5432 -d postgres:15

# MySQL
docker run --name {{PROJECT_NAME}}-db \
  -e MYSQL_ROOT_PASSWORD=password \
  -e MYSQL_DATABASE={{PROJECT_NAME}} \
  -p 3306:3306 -d mysql:8

# MongoDB
docker run --name {{PROJECT_NAME}}-db \
  -e MONGO_INITDB_ROOT_USERNAME=admin \
  -e MONGO_INITDB_ROOT_PASSWORD=password \
  -p 27017:27017 -d mongo:7
```

#### 本地安裝

根據你選擇的數據庫類型，參考官方安裝指南。

### 5. 初始化數據庫

```bash
# 生成 Prisma Client
npm run prisma:generate

# 運行數據庫遷移
npm run prisma:migrate

# (可選) 導入示例數據
npm run db:seed
```

### 6. 驗證設置

```bash
# 運行健康檢查
npm run health-check
```

**預期輸出**:
```
✅ Node.js version: 18.x.x
✅ Database connection: OK
✅ Environment variables: OK
✅ Dependencies: OK
```

---

## 🚀 啟動項目

### 開發模式

```bash
npm run dev
```

訪問: **http://localhost:3000**

**預期看到**:
- 首頁載入成功
- 無控制台錯誤
- 熱重載工作正常

### 其他啟動模式

```bash
# 生產模式構建
npm run build
npm start

# 運行測試
npm test

# 運行 Prisma Studio (數據庫 GUI)
npm run prisma:studio
```

---

## 📚 文檔閱讀順序

建議按以下順序閱讀項目文檔：

### 🔴 第一天必讀 (1-2 小時)

1. **README.md** - 項目概述和快速開始
2. **AI-ASSISTANT-GUIDE.md** - AI 助手使用指南（重要！）
3. **PROJECT-INDEX.md** - 項目文件索引和導航
4. **docs/UI-DESIGN-SYSTEM.md** - UI 設計系統規範

### 🟡 第一週推薦 (3-5 小時)

5. **docs/API-DESIGN-PATTERNS.md** - API 設計規範
6. **DEVELOPMENT-LOG.md** - 開發記錄（了解項目歷史）
7. **FIXLOG.md** - 修復日誌（避免重複錯誤）
8. **docs/DATABASE-GUIDE.md** - 數據庫架構和操作
9. **docs/ANIMATION-GUIDE.md** - 動畫系統使用
10. **docs/RESPONSIVE-DESIGN-GUIDE.md** - 響應式設計規範

### 🟢 深入了解 (根據需要)

11. **DEPLOYMENT-GUIDE.md** - 部署流程和配置
12. **docs/MONITORING-GUIDE.md** - 監控系統使用
13. **docs/TESTING-GUIDE.md** - 測試策略和編寫
14. **模組文檔** - 根據使用的模組閱讀相應文檔

---

## 🔄 開發工作流程

### 標準開發流程

```bash
# 1. 更新主分支
git checkout main
git pull origin main

# 2. 創建功能分支
git checkout -b feature/your-feature-name

# 3. 開發和測試
npm run dev
# ... 編寫代碼 ...
npm run lint
npm test

# 4. 提交代碼
git add .
git commit -m "feat: 添加新功能描述"

# 5. 推送分支
git push origin feature/your-feature-name

# 6. 創建 Pull Request
# 在 GitHub 上創建 PR，等待代碼審查
```

### Git 提交規範

使用 **Conventional Commits** 格式：

```
<type>(<scope>): <subject>

<body>

<footer>
```

**常用 type**:
- `feat`: 新功能
- `fix`: Bug 修復
- `docs`: 文檔更新
- `style`: 代碼格式（不影響功能）
- `refactor`: 重構
- `test`: 測試相關
- `chore`: 構建/工具配置

**示例**:
```
feat(auth): 添加 JWT 刷新令牌功能

- 實現刷新令牌端點
- 添加令牌過期檢查
- 更新認證中間件

Closes #123
```

### 代碼審查清單

提交 PR 前檢查：

- [ ] 代碼通過 ESLint 檢查 (`npm run lint`)
- [ ] 所有測試通過 (`npm test`)
- [ ] 添加必要的測試覆蓋
- [ ] 更新相關文檔
- [ ] 更新 PROJECT-INDEX.md（如有新文件）
- [ ] 提交信息符合規範
- [ ] 無控制台錯誤或警告

---

## 💻 常用命令

### 開發命令

```bash
npm run dev              # 啟動開發服務器
npm run build            # 生產構建
npm start                # 運行生產服務器
npm run lint             # 代碼檢查
npm run lint:fix         # 自動修復代碼問題
```

### 數據庫命令

```bash
npm run prisma:generate  # 生成 Prisma Client
npm run prisma:migrate   # 運行數據庫遷移
npm run prisma:studio    # 打開數據庫 GUI
npm run db:seed          # 導入示例數據
npm run db:reset         # 重置數據庫（⚠️ 慎用）
```

### 測試命令

```bash
npm test                 # 運行所有測試
npm run test:watch       # 監聽模式運行測試
npm run test:coverage    # 生成測試覆蓋率報告
npm run test:e2e         # 運行 E2E 測試
```

### 工具命令

```bash
npm run health-check     # 系統健康檢查
npm run check-index      # 檢查索引同步
npm run type-check       # TypeScript 類型檢查
```

---

## 📁 項目結構

```
{{PROJECT_NAME}}/
├── app/                    # Next.js 14 App Router
│   ├── (auth)/            # 認證頁面（路由組）
│   ├── api/               # API 路由
│   ├── dashboard/         # 儀表板頁面
│   ├── layout.tsx         # 根佈局
│   └── page.tsx           # 首頁
│
├── components/            # React 組件
│   ├── ui/               # 基礎 UI 組件
│   ├── layout/           # 佈局組件
│   └── [feature]/        # 功能組件
│
├── lib/                  # 核心工具庫
│   ├── db/              # 數據庫適配器
│   ├── utils.ts         # 通用工具函數
│   ├── errors.ts        # 錯誤處理
│   └── [feature]/       # 功能工具
│
├── prisma/              # 數據庫
│   ├── schema.prisma    # 數據模型定義
│   └── migrations/      # 遷移文件
│
├── types/               # TypeScript 類型定義
├── hooks/               # 自定義 React Hooks
├── public/              # 靜態資源
├── docs/                # 項目文檔
├── __tests__/           # 測試文件
│
├── .env.local           # 環境變數（不提交）
├── next.config.js       # Next.js 配置
├── tailwind.config.js   # Tailwind CSS 配置
├── tsconfig.json        # TypeScript 配置
└── package.json         # 依賴和腳本
```

**重要目錄說明**:

- **app/**: 使用 Next.js 14 App Router，所有路由和頁面
- **components/ui/**: 20+ 可重用 UI 組件（Button, Input, Dialog 等）
- **lib/db/**: 多數據庫抽象層，支持 PostgreSQL/MySQL/MongoDB/SQLite
- **prisma/**: 數據庫 Schema 和遷移文件
- **docs/**: 完整的項目文檔中心

---

## 📝 開發規範

### TypeScript 規範

- **嚴格模式**: 項目使用 TypeScript 嚴格模式
- **類型定義**: 優先使用 `interface` 而非 `type`（除非需要聯合類型）
- **避免 `any`**: 盡量使用具體類型或泛型
- **導出類型**: 所有公共類型應從 `types/` 目錄導出

```typescript
// ✅ Good
interface User {
  id: string;
  name: string;
  email: string;
}

// ❌ Bad
const user: any = {...};
```

### React 組件規範

- **函數組件**: 使用函數組件和 Hooks（不使用 Class 組件）
- **Server Components**: 默認使用 Server Components，需要交互時才用 `'use client'`
- **命名規範**: 組件使用 PascalCase，文件名與組件名一致
- **Props 類型**: 所有組件 Props 必須定義類型

```typescript
// ✅ Good - Server Component (默認)
export default function UserList() {
  return <div>...</div>;
}

// ✅ Good - Client Component (需要時)
'use client';
export default function InteractiveButton() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(count + 1)}>{count}</button>;
}
```

### API 路由規範

- **RESTful**: 遵循 RESTful 設計原則
- **錯誤處理**: 使用統一的錯誤響應格式
- **驗證**: 使用 Zod 進行請求驗證
- **認證**: 使用中間件進行認證檢查

詳細規範請參考: **docs/API-DESIGN-PATTERNS.md**

### 樣式規範

- **Tailwind CSS**: 優先使用 Tailwind 類名
- **CSS 變量**: 使用設計系統定義的 CSS 變量
- **響應式**: 移動優先設計，使用響應式斷點
- **暗色模式**: 支持明暗兩種模式

```tsx
// ✅ Good - Tailwind + 響應式
<div className="p-4 md:p-6 lg:p-8 bg-background text-foreground">

// ❌ Bad - 內聯樣式
<div style={{padding: '1rem', backgroundColor: '#fff'}}>
```

### 測試規範

- **單元測試**: 所有工具函數必須有單元測試
- **組件測試**: 重要組件需要測試
- **E2E 測試**: 關鍵用戶流程需要 E2E 測試
- **覆蓋率**: 目標 ≥80%

---

## ❓ 常見問題

### 1. 數據庫連接失敗

**問題**: `Error: Can't reach database server`

**解決方案**:
```bash
# 檢查數據庫是否運行
docker ps  # 或檢查本地數據庫服務

# 驗證 DATABASE_URL 配置
echo $DATABASE_URL

# 測試連接
npm run prisma:studio
```

### 2. 端口被占用

**問題**: `Error: listen EADDRINUSE: address already in use :::3000`

**解決方案**:
```bash
# 查找占用端口的進程
lsof -i :3000  # macOS/Linux
netstat -ano | findstr :3000  # Windows

# 殺死進程或更改端口
PORT=3001 npm run dev
```

### 3. Prisma Client 未生成

**問題**: `Cannot find module '@prisma/client'`

**解決方案**:
```bash
npm run prisma:generate
```

### 4. TypeScript 錯誤

**問題**: 大量類型錯誤

**解決方案**:
```bash
# 重新安裝依賴
rm -rf node_modules package-lock.json
npm install

# 重啟 TypeScript 服務器
# VS Code: Ctrl+Shift+P → "TypeScript: Restart TS Server"
```

### 5. 熱重載不工作

**問題**: 修改代碼後頁面不更新

**解決方案**:
```bash
# 清除 .next 緩存
rm -rf .next
npm run dev
```

---

## 🔗 資源鏈接

### 項目文檔

- [README.md](../README.md) - 項目主文檔
- [AI-ASSISTANT-GUIDE.md](../AI-ASSISTANT-GUIDE.md) - AI 助手指南
- [PROJECT-INDEX.md](../PROJECT-INDEX.md) - 文件索引
- [DEPLOYMENT-GUIDE.md](../DEPLOYMENT-GUIDE.md) - 部署指南

### 技術文檔

- [Next.js 文檔](https://nextjs.org/docs)
- [React 文檔](https://react.dev)
- [TypeScript 文檔](https://www.typescriptlang.org/docs/)
- [Prisma 文檔](https://www.prisma.io/docs)
- [Tailwind CSS 文檔](https://tailwindcss.com/docs)

### 工具和資源

- [GitHub Repository]({{GITHUB_REPO_URL}})
- [Issue Tracker]({{GITHUB_REPO_URL}}/issues)
- [Team Wiki]({{TEAM_WIKI_URL}})
- [Slack/Discord]({{TEAM_CHAT_URL}})

---

## 🎯 下一步

完成設置後，建議的學習路徑：

1. **第一週**: 熟悉項目結構，閱讀核心文檔，完成第一個小任務
2. **第二週**: 深入了解使用的模組，開始貢獻代碼
3. **第三週**: 參與代碼審查，了解團隊工作流程
4. **第四週**: 獨立完成功能開發

**建議第一個任務**: 修復一個標記為 `good-first-issue` 的 Issue

---

**📝 提示**: 遇到問題時，先檢查文檔和 FIXLOG.md，再向團隊求助。保持好奇心，不斷學習！

**歡迎加入 {{PROJECT_NAME}} 團隊！🎉**
