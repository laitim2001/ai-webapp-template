/**
 * ================================================================
 * Dashboard Sidebar 組件
 * Dashboard Sidebar Component
 * ================================================================
 *
 * 【功能】
 * - 品牌標識和應用名稱
 * - 用戶信息卡片（頭像、姓名、角色、在線狀態）
 * - 分組導航菜單（概覽、客戶管理、AI工具、知識管理）
 * - 活躍鏈接高亮
 * - Badge 數字提示和 NEW 標籤
 * - 底部設定和幫助菜單
 *
 * 【使用】
 * import { DashboardSidebar } from '@/components/layout/dashboard-sidebar';
 * <DashboardSidebar />
 */

'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import {
  BarChart3,
  Users,
  FileText,
  Search,
  MessageSquare,
  Settings,
  HelpCircle,
  Brain,
  BookOpen,
  Target,
  TrendingUp,
  PieChart,
  Calendar,
  Archive,
  Star,
  Layout
} from 'lucide-react'
import { cn } from '@/lib/utils'

// 模擬用戶數據（實際應該從 useAuth 或 context 獲取）
const mockUser = {
  first_name: 'Admin',
  last_name: 'User',
  role: 'ADMIN',
  email: 'admin@example.com'
}

interface NavigationItem {
  name: string
  href: string
  icon: React.ComponentType<{ className?: string }>
  badge?: string | number
  description?: string
  current?: boolean
}

interface NavigationSection {
  title: string
  items: NavigationItem[]
}

export function DashboardSidebar() {
  const pathname = usePathname()

  // 使用模擬用戶（可以替換為實際的 useAuth hook）
  const user = mockUser

  const navigation: NavigationSection[] = [
    {
      title: '概覽',
      items: [
        {
          name: '儀表板',
          href: '/dashboard',
          icon: BarChart3,
          description: '業績總覽和關鍵指標'
        },
        {
          name: '我的任務',
          href: '/dashboard/tasks',
          icon: Target,
          badge: 5,
          description: '今日待辦事項'
        },
        {
          name: '銷售活動',
          href: '/dashboard/activities',
          icon: Calendar,
          description: '會議、電話、跟進活動'
        },
      ]
    },
    {
      title: '客戶管理',
      items: [
        {
          name: '客戶列表',
          href: '/dashboard/customers',
          icon: Users,
          description: '客戶資料和關係管理'
        },
        {
          name: '銷售機會',
          href: '/dashboard/opportunities',
          icon: TrendingUp,
          badge: 12,
          description: '潛在商機和成交預測'
        },
        {
          name: '客戶分析',
          href: '/dashboard/analytics',
          icon: PieChart,
          description: '客戶行為和偏好分析'
        },
      ]
    },
    {
      title: 'AI 工具',
      items: [
        {
          name: 'AI 搜索',
          href: '/dashboard/search',
          icon: Search,
          description: '智能知識庫搜索'
        },
        {
          name: 'AI 助手',
          href: '/dashboard/assistant',
          icon: Brain,
          description: '智能對話助手'
        },
        {
          name: '提案生成',
          href: '/dashboard/proposals',
          icon: FileText,
          description: 'AI 個人化提案生成'
        },
        {
          name: '範本管理',
          href: '/dashboard/templates',
          icon: Layout,
          description: '提案範本創建和管理'
        },
        {
          name: '對話分析',
          href: '/dashboard/conversation-analysis',
          icon: MessageSquare,
          badge: 'NEW',
          description: '客戶對話洞察分析'
        },
      ]
    },
    {
      title: '知識管理',
      items: [
        {
          name: '知識庫',
          href: '/dashboard/knowledge',
          icon: BookOpen,
          description: '產品資料和材料'
        },
        {
          name: '智能搜索',
          href: '/dashboard/knowledge/search',
          icon: Search,
          description: 'AI驅動的智能文檔搜索'
        },
        {
          name: '文檔管理',
          href: '/dashboard/documents',
          icon: Archive,
          description: '文檔上傳和分類'
        },
        {
          name: '我的收藏',
          href: '/dashboard/favorites',
          icon: Star,
          badge: 8,
          description: '常用資料和模板'
        },
      ]
    },
  ]

  const bottomNavigation = [
    {
      name: '設定',
      href: '/dashboard/settings',
      icon: Settings,
      description: '帳戶和系統設定'
    },
    {
      name: '幫助中心',
      href: '/dashboard/help',
      icon: HelpCircle,
      description: '使用指南和支援'
    },
  ]

  // 獲取角色顯示名稱
  const getRoleDisplay = (role: string) => {
    const roleMap: Record<string, string> = {
      'SALES_REP': '銷售代表',
      'SALES_MANAGER': '銷售經理',
      'MARKETING_SPECIALIST': '行銷專員',
      'CUSTOMER_SERVICE': '客戶服務',
      'ADMIN': '系統管理員',
      'USER': '用戶'
    }
    return roleMap[role] || role
  }

  return (
    <div className="flex h-full flex-col gap-y-5 overflow-y-auto bg-white dark:bg-gray-800 px-6 pb-4 shadow-lg border-r border-gray-200 dark:border-gray-700">
      {/* Logo 和品牌 */}
      <div className="flex h-16 shrink-0 items-center border-b border-gray-200 dark:border-gray-700">
        <Link href="/dashboard" className="flex items-center space-x-3">
          <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-blue-600">
            <Brain className="h-5 w-5 text-white" />
          </div>
          <div className="flex flex-col">
            <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{{PROJECT_NAME}}</span>
            <span className="text-xs text-gray-500 dark:text-gray-400">智能管理</span>
          </div>
        </Link>
      </div>

      {/* 用戶資訊 */}
      <div className="flex items-center space-x-3 rounded-lg bg-gray-50 dark:bg-gray-700 p-3">
        <div className="flex h-8 w-8 items-center justify-center rounded-full bg-blue-600">
          <span className="text-sm font-medium text-white">
            {user?.first_name?.charAt(0) || 'U'}
          </span>
        </div>
        <div className="flex-1 min-w-0">
          <p className="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">
            {user?.first_name} {user?.last_name}
          </p>
          <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
            {getRoleDisplay(user?.role)}
          </p>
        </div>
        <div className="flex h-2 w-2 rounded-full bg-green-400"></div>
      </div>

      {/* 主導航 */}
      <nav className="flex flex-1 flex-col">
        <div className="space-y-8">
          {navigation.map((section) => (
            <div key={section.title}>
              <h3 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                {section.title}
              </h3>
              <div className="mt-3 space-y-1">
                {section.items.map((item) => {
                  const isActive = pathname === item.href
                  return (
                    <Link
                      key={item.name}
                      href={item.href}
                      className={cn(
                        'group flex items-center justify-between rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200',
                        isActive
                          ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-100 shadow-sm'
                          : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100'
                      )}
                      title={item.description}
                    >
                      <div className="flex items-center space-x-3">
                        <item.icon
                          className={cn(
                            'h-5 w-5 shrink-0',
                            isActive
                              ? 'text-blue-600 dark:text-blue-400'
                              : 'text-gray-400 dark:text-gray-500 group-hover:text-gray-600 dark:group-hover:text-gray-300'
                          )}
                        />
                        <span className="truncate">{item.name}</span>
                      </div>
                      {item.badge && (
                        <span
                          className={cn(
                            'rounded-full px-2 py-1 text-xs font-medium',
                            item.badge === 'NEW'
                              ? 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300'
                              : 'bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300'
                          )}
                        >
                          {item.badge}
                        </span>
                      )}
                    </Link>
                  )
                })}
              </div>
            </div>
          ))}
        </div>

        {/* 底部導航 */}
        <div className="mt-auto pt-6 border-t border-gray-200 dark:border-gray-700">
          <div className="space-y-1">
            {bottomNavigation.map((item) => {
              const isActive = pathname === item.href
              return (
                <Link
                  key={item.name}
                  href={item.href}
                  className={cn(
                    'group flex items-center rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200',
                    isActive
                      ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100'
                      : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100'
                  )}
                  title={item.description}
                >
                  <item.icon
                    className={cn(
                      'mr-3 h-5 w-5 shrink-0',
                      isActive
                        ? 'text-gray-600 dark:text-gray-300'
                        : 'text-gray-400 dark:text-gray-500 group-hover:text-gray-600 dark:group-hover:text-gray-300'
                    )}
                  />
                  <span className="truncate">{item.name}</span>
                </Link>
              )
            })}
          </div>
        </div>
      </nav>
    </div>
  )
}
