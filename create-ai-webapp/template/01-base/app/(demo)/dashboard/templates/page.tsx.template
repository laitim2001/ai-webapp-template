'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { DemoBanner } from '@/components/demo-banner';
import { ArrowLeft, Search, Plus, FileText, Eye, Globe, Lock, Copy } from 'lucide-react';
import { demoGetTemplates } from '@/lib/demo-api';

export default function TemplatesPage() {
  const [templates, setTemplates] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await demoGetTemplates();
        if (response.success && response.data) {
          setTemplates(response.data.templates || []);
        }
      } catch (error) {
        console.error('Failed to fetch templates:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  const filteredTemplates = templates.filter(template =>
    template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    template.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const getCategoryColor = (category: string) => {
    const colors: any = {
      '提案': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
      '技術文檔': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',
      '需求分析': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
      '項目管理': 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <header className="sticky top-0 z-10 border-b bg-white dark:bg-gray-800">
        <div className="flex h-16 items-center justify-between px-6">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="icon" asChild>
              <Link href="/(demo)/dashboard"><ArrowLeft className="h-5 w-5" /></Link>
            </Button>
            <h1 className="text-xl font-bold">模板管理</h1>
          </div>
          <Button><Plus className="mr-2 h-4 w-4" />新增模板</Button>
        </div>
      </header>

      <main className="p-6">
        <DemoBanner />

        <div className="mb-6">
          <div className="relative">
            <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="搜索模板..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {filteredTemplates.map((template) => (
            <Card key={template.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between mb-2">
                  <FileText className="h-8 w-8 text-primary" />
                  <div className="flex items-center gap-2">
                    {template.isPublic ? (
                      <Globe className="h-4 w-4 text-green-600" />
                    ) : (
                      <Lock className="h-4 w-4 text-gray-600" />
                    )}
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(template.category)}`}>
                      {template.category}
                    </span>
                  </div>
                </div>
                <CardTitle className="text-lg">{template.name}</CardTitle>
                <CardDescription>{template.description}</CardDescription>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="text-sm text-muted-foreground">
                  <div className="mb-2">包含章節:</div>
                  <div className="flex flex-wrap gap-1">
                    {template.sections.slice(0, 3).map((section: string, index: number) => (
                      <Badge key={index} variant="outline" className="text-xs">{section}</Badge>
                    ))}
                    {template.sections.length > 3 && (
                      <Badge variant="outline" className="text-xs">
                        +{template.sections.length - 3}
                      </Badge>
                    )}
                  </div>
                </div>

                <div className="flex items-center justify-between text-sm pt-4 border-t">
                  <div className="text-muted-foreground">
                    <Copy className="inline h-3 w-3 mr-1" />
                    使用 {template.usageCount} 次
                  </div>
                  <div className="text-muted-foreground">
                    {template.lastUsed}
                  </div>
                </div>

                <div className="text-xs text-muted-foreground">
                  創建者: {template.createdBy}
                </div>

                <div className="flex gap-2 pt-2">
                  <Button variant="outline" size="sm" className="flex-1">
                    <Eye className="mr-2 h-4 w-4" />
                    預覽
                  </Button>
                  <Button size="sm" className="flex-1">
                    <Copy className="mr-2 h-4 w-4" />
                    使用
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </main>
    </div>
  );
}
