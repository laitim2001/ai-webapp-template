/**
 * ================================================================
 * Authentication Module - Type Definitions
 * Purpose: TypeScript interfaces and types for authentication system
 * ================================================================
 */

/**
 * User entity interface
 */
export interface User {
  id: number
  email: string
  first_name: string
  last_name: string
  role: string
  department?: string
  is_active: boolean
  created_at: string
  updated_at: string
  last_login?: string
}

/**
 * Authentication error interface
 */
export interface AuthError {
  message: string
  code?: string
  field?: string
}

/**
 * Authentication API response
 */
export interface AuthResponse {
  success: boolean
  user?: User
  accessToken?: string
  refreshToken?: string
  error?: AuthError
}

/**
 * User registration data
 */
export interface RegisterData {
  email: string
  password: string
  firstName: string
  lastName: string
  department?: string
}

/**
 * User login credentials
 */
export interface LoginCredentials {
  email: string
  password: string
  deviceId?: string
}

/**
 * Authentication context type
 */
export interface AuthContextType {
  user: User | null
  isLoading: boolean
  isAuthenticated: boolean
  login: (email: string, password: string) => Promise<AuthResponse>
  register: (userData: RegisterData) => Promise<AuthResponse>
  logout: () => void
  refreshUser: () => Promise<void>
  checkAuthStatus: () => Promise<boolean>
}

/**
 * JWT token payload
 */
export interface TokenPayload {
  userId: number
  email: string
  role: string
  type: 'access' | 'refresh'
  iat?: number
  exp?: number
  iss?: string
  aud?: string
}

/**
 * Refresh token payload
 */
export interface RefreshTokenPayload extends TokenPayload {
  tokenId: string
  type: 'refresh'
}

/**
 * Device context for multi-device session management
 */
export interface DeviceContext {
  deviceId?: string
  ipAddress?: string
  userAgent?: string
}

/**
 * Token pair (access + refresh)
 */
export interface TokenPair {
  accessToken: string
  refreshToken: string
  expiresIn: number
}

/**
 * Azure AD user information
 */
export interface AzureADUserInfo {
  oid: string
  preferred_username: string
  name?: string
  given_name?: string
  family_name?: string
  roles?: string[]
}

/**
 * User role enum
 */
export type UserRole = 'USER' | 'ADMIN' | 'MANAGER' | 'VIEWER'

/**
 * Password validation result
 */
export interface PasswordValidation {
  isValid: boolean
  errors: string[]
}
