// ================================================================
// Prisma Schema - PostgreSQL
// ================================================================
// 
// 這是 PostgreSQL 專用的 Prisma Schema。
// 功能最完整，支援向量搜索（pgvector）和全文搜索。

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// =====================================================
// 核心模型
// =====================================================

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String?
  password      String?
  role          UserRole         @default(USER)
  
  azureAdId     String?          @unique
  azureAdTenant String?
  
  isActive      Boolean          @default(true)
  emailVerified Boolean          @default(false)
  lastLoginAt   DateTime?
  
  preferences   Json?
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  sessions      Session[]
  notifications Notification[]
  
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model Session {
  id           String           @id @default(cuid())
  userId       String
  
  refreshToken String           @unique
  accessToken  String?
  
  deviceInfo   String?
  ipAddress    String?
  
  expiresAt    DateTime
  lastUsedAt   DateTime         @default(now())
  
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("sessions")
}

model TokenBlacklist {
  id        String           @id @default(cuid())
  token     String           @unique
  expiresAt DateTime
  reason    String?
  createdAt DateTime         @default(now())
  
  @@index([token])
  @@index([expiresAt])
  @@map("token_blacklist")
}

model Notification {
  id        String               @id @default(cuid())
  userId    String
  
  type      NotificationType
  title     String
  message   String               @db.Text
  data      Json?
  
  isRead    Boolean              @default(false)
  readAt    DateTime?
  
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  SYSTEM
  WORKFLOW
  KNOWLEDGE
  APPROVAL
  COMMENT
  MENTION
}

// =====================================================
// 知識庫模型（PostgreSQL 特有向量搜索）
// =====================================================

model KnowledgeItem {
  id          String           @id @default(cuid())
  
  title       String
  content     String           @db.Text
  category    String?
  tags        String[]
  
  sourceFile  String?
  fileType    String?
  
  // PostgreSQL 向量嵌入（pgvector）
  embedding   Unsupported("vector(1536)")?
  
  version     Int              @default(1)
  status      KnowledgeStatus  @default(DRAFT)
  
  createdBy   String
  updatedBy   String?
  approvedBy  String?
  approvedAt  DateTime?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@index([title])
  @@index([category])
  @@index([status])
  @@index([embedding(ops: raw("vector_cosine_ops"))], type: Gin)
  @@map("knowledge_items")
}

enum KnowledgeStatus {
  DRAFT
  PENDING
  APPROVED
  ARCHIVED
}

// =====================================================
// 工作流程模型
// =====================================================

model WorkflowInstance {
  id          String           @id @default(cuid())
  
  name        String
  description String?
  templateId  String?
  
  state       WorkflowState    @default(DRAFT)
  previousState WorkflowState?
  
  data        Json
  metadata    Json?
  
  version     Int              @default(1)
  
  submittedAt DateTime?
  submittedBy String?
  approvedBy  String?
  approvedAt  DateTime?
  rejectedBy  String?
  rejectedAt  DateTime?
  rejectionReason String?
  
  createdBy   String
  updatedBy   String?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  completedAt DateTime?
  
  comments    WorkflowComment[]
  history     WorkflowHistory[]
  
  @@index([state])
  @@index([createdBy])
  @@index([createdAt])
  @@map("workflow_instances")
}

enum WorkflowState {
  DRAFT
  IN_PROGRESS
  PENDING_REVIEW
  UNDER_REVIEW
  APPROVED
  REJECTED
  ON_HOLD
  CANCELLED
  COMPLETED
  ARCHIVED
  FAILED
  EXPIRED
}

model WorkflowComment {
  id         String           @id @default(cuid())
  workflowId String
  
  content    String           @db.Text
  
  createdBy  String
  
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  workflow   WorkflowInstance @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@index([workflowId])
  @@map("workflow_comments")
}

model WorkflowHistory {
  id         String           @id @default(cuid())
  workflowId String
  
  fromState  WorkflowState?
  toState    WorkflowState
  action     String
  
  changedBy  String
  
  snapshot   Json
  
  createdAt  DateTime         @default(now())
  
  workflow   WorkflowInstance @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@index([workflowId])
  @@index([createdAt])
  @@map("workflow_history")
}

