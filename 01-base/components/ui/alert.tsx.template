/**
 * ================================================================
 * {{PROJECT_NAME}} - Alert Component
 * ================================================================
 *
 * Structured alert component for displaying important messages, errors, success states, etc.
 * Supports multiple alert types and custom content.
 *
 * @component
 * @example
 * ```tsx
 * // Info alert
 * <Alert>
 *   <AlertCircle className="h-4 w-4" />
 *   <AlertTitle>Tip</AlertTitle>
 *   <AlertDescription>
 *     This is an important information message.
 *   </AlertDescription>
 * </Alert>
 *
 * // Success message
 * <Alert variant="success">
 *   <CheckCircle className="h-4 w-4" />
 *   <AlertTitle>Success</AlertTitle>
 *   <AlertDescription>
 *     Your data has been saved successfully.
 *   </AlertDescription>
 * </Alert>
 *
 * // Error warning
 * <Alert variant="destructive">
 *   <AlertTriangle className="h-4 w-4" />
 *   <AlertTitle>Error</AlertTitle>
 *   <AlertDescription>
 *     An error occurred. Please try again later.
 *   </AlertDescription>
 * </Alert>
 *
 * // Simple warning
 * <Alert variant="warning">
 *   Note: This action cannot be undone.
 * </Alert>
 * ```
 */

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
        warning:
          "border-yellow-500/50 text-yellow-800 dark:border-yellow-500 [&>svg]:text-yellow-600",
        success:
          "border-green-500/50 text-green-800 dark:border-green-500 [&>svg]:text-green-600",
        info:
          "border-blue-500/50 text-blue-800 dark:border-blue-500 [&>svg]:text-blue-600",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

