# 🔧 {{PROJECT_NAME}} - 修復日誌

> **目的**: 記錄所有重要問題的修復過程，防止重複犯錯，提供問題排查指南
> **重要**: ⚠️ **新的修復記錄必須添加在索引表和詳細內容的最頂部** - 保持時間倒序排列（最新在上）
> **格式**: `FIX-XXX: 問題簡述`，編號遞增，詳細內容按編號倒序排列

## 📋 修復記錄索引 (最新在上)

| 日期 | 問題類型 | 狀態 | 描述 |
|------|----------|------|------|
| {{CURRENT_DATE}} | 🔧 示例 | ✅ 已解決 | [FIX-001: 示例問題修復](#fix-001-示例問題修復) |

## 🔍 快速搜索

- **認證問題**: (添加相關FIX編號)
- **API問題**: (添加相關FIX編號)
- **UI/UX問題**: (添加相關FIX編號)
- **數據庫問題**: (添加相關FIX編號)
- **TypeScript問題**: (添加相關FIX編號)

## 📝 維護指南

- **新增修復記錄**: 在索引表頂部添加新條目，在詳細記錄頂部添加完整內容
- **編號規則**: 按時間順序遞增 (FIX-001, FIX-002...)
- **狀態標記**: ✅已解決 / 🔄進行中 / ❌未解決 / 📋待修復
- **問題級別**: 🔴Critical / 🟡High / 🟢Medium / 🔵Low

---

## FIX-001: 示例問題修復

**日期**: {{CURRENT_DATE}}
**發現者**: (誰發現的問題)
**狀態**: ✅ 已解決
**級別**: 🟢 Medium
**影響範圍**: (問題影響的範圍)

### 問題描述

**初始症狀**:
- (描述問題現象)
- (用戶看到的錯誤或異常行為)

**問題根因**:
1. (根本原因1)
2. (根本原因2)

### 技術細節

**問題代碼** (修復前):
```typescript
// 問題代碼示例
const problematicCode = ...;
```

**錯誤訊息**:
```
錯誤訊息或堆疊追蹤
```

### 修復方案

**修改的文件**:
1. `path/to/file1.ts` - (簡述修改)
2. `path/to/file2.tsx` - (簡述修改)

**修復代碼**:
```typescript
// 修復後的代碼
const fixedCode = ...;
```

**修復步驟**:
1. (步驟1)
2. (步驟2)
3. (步驟3)

### 測試驗證

**測試步驟**:
1. (驗證步驟1)
2. (驗證步驟2)

**測試結果**:
```
修復前: (問題現象)
修復後: (正常行為) ✅
```

### 經驗教訓

**根本原因分析**:
- (為什麼會發生這個問題)
- (如何預防類似問題)

**最佳實踐**:
- (從這次修復學到的經驗)
- (未來開發的注意事項)

### 相關資源

- **相關Issue**: #XXX
- **相關PR**: #YYY
- **參考文檔**: (相關文檔鏈接)

---

## 📝 修復記錄模板

複製以下模板來記錄新的問題修復：

```markdown
## FIX-XXX: 問題簡短描述

**日期**: YYYY-MM-DD
**發現者**: (發現者名稱或來源)
**狀態**: ✅已解決 / 🔄進行中 / ❌未解決
**級別**: 🔴Critical / 🟡High / 🟢Medium / 🔵Low
**影響範圍**: (描述影響範圍)

### 問題描述

**初始症狀**:
- (症狀1)
- (症狀2)

**問題根因**:
1. (根因1)
2. (根因2)

### 技術細節

**問題代碼** (修復前):
\`\`\`typescript
// 問題代碼
\`\`\`

**錯誤訊息**:
\`\`\`
錯誤訊息
\`\`\`

### 修復方案

**修改的文件**:
1. \`path/to/file.ts\` - (修改描述)

**修復代碼**:
\`\`\`typescript
// 修復後的代碼
\`\`\`

**修復步驟**:
1. (步驟1)
2. (步驟2)

### 測試驗證

**測試步驟**:
1. (測試1)
2. (測試2)

**測試結果**:
\`\`\`
修復前: (問題)
修復後: (正常) ✅
\`\`\`

### 經驗教訓

**根本原因分析**:
- (分析)

**最佳實踐**:
- (經驗)

### 相關資源

- **相關Issue**: #XXX
- **相關PR**: #YYY

---
```

## 📊 問題類型分類

使用以下標記分類問題類型：

- 🔑 **認證/授權** - 登入、Token、權限相關
- 🌐 **API** - API 端點、路由、響應相關
- 🎨 **UI/UX** - 界面、用戶體驗相關
- ⚛️ **React** - React 組件、狀態管理相關
- 🗄️ **數據庫** - Prisma、SQL、數據模型相關
- 🔧 **TypeScript** - 類型錯誤、編譯問題
- 📦 **依賴/環境** - npm 包、環境配置相關
- 🔄 **構建/部署** - Webpack、Docker、CI/CD 相關
- 🧪 **測試** - 單元測試、E2E 測試相關
- 🔍 **監控/日誌** - 監控系統、日誌記錄相關
- ⚡ **性能** - 性能優化、緩存相關
- 🔒 **安全** - 安全漏洞、加密相關

## 📈 統計分析

定期分析修復記錄可以了解：

- 最常見的問題類型
- 問題修復的平均時間
- 重複出現的問題模式
- 代碼質量趨勢

## 🛠️ 最佳實踐

### 何時記錄

建議記錄以下類型的問題：

1. **生產環境問題** - 影響用戶的任何問題
2. **複雜Bug** - 花費超過1小時調查的問題
3. **重複問題** - 可能再次出現的問題
4. **系統性問題** - 架構或設計層面的問題
5. **有學習價值的問題** - 可以幫助團隊成長的問題

### 記錄原則

1. **及時記錄** - 修復完成後立即記錄
2. **詳細但簡潔** - 提供足夠的細節，但避免冗長
3. **包含上下文** - 說明問題發生的環境和條件
4. **記錄根因** - 不只記錄症狀，更要記錄根本原因
5. **提供預防措施** - 說明如何避免類似問題

### 索引維護

- 保持索引表更新
- 使用一致的問題類型標記
- 定期整理快速搜索部分
- 保持時間倒序排列

---

**📝 提示**: 維護良好的修復日誌可以幫助團隊快速定位問題、避免重複錯誤、提升代碼質量。
